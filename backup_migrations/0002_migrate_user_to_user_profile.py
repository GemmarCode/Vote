# Generated by Django 4.2.20 on 2025-04-05 15:38

from django.db import migrations


def migrate_user_to_user_profile(apps, schema_editor):
    # Get the models
    Candidate = apps.get_model('user', 'Candidate')
    UserProfile = apps.get_model('user', 'UserProfile')
    Vote = apps.get_model('user', 'Vote')
    
    # Process candidates
    for candidate in Candidate.objects.all():
        if candidate.user and not candidate.user_profile:
            try:
                # Find the corresponding user profile
                user_profile = UserProfile.objects.get(user=candidate.user)
                # Update the candidate's user_profile field
                candidate.user_profile = user_profile
                candidate.save(update_fields=['user_profile'])
                print(f"Updated candidate {candidate.id} with user_profile {user_profile.id}")
            except UserProfile.DoesNotExist:
                print(f"No UserProfile found for user {candidate.user.id} in candidate {candidate.id}")
            except Exception as e:
                print(f"Error updating candidate {candidate.id}: {str(e)}")
    
    # Process votes
    for vote in Vote.objects.all():
        if vote.user and not vote.user_profile:
            try:
                # Find the corresponding user profile
                user_profile = UserProfile.objects.get(user=vote.user)
                # Update the vote's user_profile field
                vote.user_profile = user_profile
                vote.save(update_fields=['user_profile'])
                print(f"Updated vote {vote.id} with user_profile {user_profile.id}")
            except UserProfile.DoesNotExist:
                print(f"No UserProfile found for user {vote.user.id} in vote {vote.id}")
            except Exception as e:
                print(f"Error updating vote {vote.id}: {str(e)}")


def reverse_migrate(apps, schema_editor):
    # Get the models
    Candidate = apps.get_model('user', 'Candidate')
    Vote = apps.get_model('user', 'Vote')
    
    # Process candidates
    for candidate in Candidate.objects.all():
        if candidate.user_profile and not candidate.user:
            try:
                # Update the candidate's user field from user_profile.user
                candidate.user = candidate.user_profile.user
                candidate.save(update_fields=['user'])
                print(f"Reversed update for candidate {candidate.id}")
            except Exception as e:
                print(f"Error reversing update for candidate {candidate.id}: {str(e)}")
    
    # Process votes
    for vote in Vote.objects.all():
        if vote.user_profile and not vote.user:
            try:
                # Update the vote's user field from user_profile.user
                vote.user = vote.user_profile.user
                vote.save(update_fields=['user'])
                print(f"Reversed update for vote {vote.id}")
            except Exception as e:
                print(f"Error reversing update for vote {vote.id}: {str(e)}")


class Migration(migrations.Migration):

    dependencies = [
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_user_to_user_profile, reverse_migrate),
    ]
